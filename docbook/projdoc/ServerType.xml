<?xml version="1.0" encoding="ISO-8859-1"?>

<chapter id="ServerType">
<chapterinfo>
	&author.tridge;
	&author.jelmer;
	&author.jht;
	<author>&person.hba;<contrib>German Translator</contrib></author>
</chapterinfo>

<title>Server Arten und Sicherheitsmodi</title>

<para>
Dieses Kapitel enthällt Informationen betreffend der verschiedenen Server Typen
die Sie im Samba Server einstellen können. Ein Microsoft Netzwerk Administrator
der zu Samba migrieren bzw. Samba nutzen möchte, ist bestimmt interessiert welche
Samba Konfigurationen er machen muss im Vergleich zu den Konfigurationen eines
Windows Servers. Es ist wichtig die Sicherheitsdefinitionen zu definieren, bevor
man den Server selbst konfiguriert.
</para>

<para>
Dieses Kapitel gibt einen Überblick über die Sicherheitsmodi von Samba und wie Sie
im Vergleich zu Windows stehen.
</para>

<para>
Eine Frage die häufig gestellt wird lautet: <quote>Warum will ich Samba nutzen?</quote>
Die meisten Kapitel enthalten eine Sektion die die Postive Merkmale und Vorteile hervorhebt.
Wir hoffen dass diese Informationen ihnen diese Frage beantworten können. Wir wollen Fair
und Vernünftig bleiben, somit ist darauf zu achten, dass nicht alle Features für Samba
sprechen. Der Vorzug könnte auf unserer seite des Wettkampfes sein.
</para>

<sect1>
<title>Positive Merkmale und Vorteile</title>

<para>
Zwei Männer gehen eine staubige Straße entlang als der eine plötlzlich einen kleinen roten
Stein wegschießt. Sein Zeh schmerzt durch den Stein und dieser wandert in die Sandale des
einen Mannes. Er nimmt den Stein unter zornigem Fluchen aus der Sandale und ist sehr verärgert.
Der andere Mann schaut sich den Stein an und sagt: <quote>Dies ist ein Granat, ich könnte ihn
zu Schmuck verarbeiten und eines Tages wird er einer Prinzessin viel Freude bereiten.</quote>
</para>

<para>
Und die Moral von dieser Geschichte: Zwei Männder, zwei verschiedene Betrachtungsweisen des
gleichen Steins. Mögen oder hassen. Samba ist wie dieser Stein. Behandeln Sie ihn richtig
kann er ihnen einen großen Dienst erweisen aber wenn Sie gezwungen sind ihn zu benutzen ohne
seine Geheimnisse zu kennen kann er eine Quelle des Unbehagen sein.
</para>

<para>
Samba startete als Projekt um zu versuchen die Zusammenarbeit von MS Windows 3.x Clients und
Unix Servern zu gewährleisten. Es ist seit den Anfangen viel gewachsen und stellt jetzt Merkmale
und Funktionen zur Verfügung die es bereit für große Aufgaben macht. Es hat aber auch ein paar
Nachteile, die wir in Sektionen wie dieser besprechen möchten.
</para>

<para>
Also, was sind die Vorteile und Merkmale die wir in diesem Kapitel erwähnt hatten?
</para>

<itemizedlist>
	<listitem><para>
	Samba 3 kann einen MS Windows NT4 Domänen Controller ersetzen.
	</para></listitem>

	<listitem><para>
	Samba 3 bietet exzellente Kompatibiltät mit MS Windows NT4 Domänen sowie
	native Microsoft Active Directory Domänen.
	</para></listitem>

	<listitem><para>
	Samba 3 erlaubt volle NT4-Stil Interdomain Trusts.
	</para></listitem>

	<listitem><para>
	Samba hat Sicherheitsmodi die anpassungsfähigere Benutzer Beglaubigung
	durchführen können als Windows NT4 Domänen Controller.
	</para></listitem>

	<listitem><para>
	Samba 3 unterstützt die Nutzung von verschiedenen Account Datenbanken zur gleichen Zeit.
	</para></listitem>

	<listitem><para>
	Die Account- bzw. Passwortdatenbanken können mit verschiedenen Methoden verteilt und
	Repliziert werden. Dies ermöglicht es mit Samba 3 eine größere Flexibilität als MS
	Windows NT4 und in vielen Fällen auch bedeutsam besseres Werkzeug als Active Directory
	Domänen unter Windows 200x.
	</para></listitem>
</itemizedlist>

</sect1>

<sect1>
<title>Server Arten</title>


<para>
<indexterm><primary>Server Type</primary></indexterm>
Administratoren von Microsoft Netzwerken beziehen sich oft auf drei verschiedene Serverarten:
</para>

<itemizedlist>
	<listitem><para>Dömanen Controller</para>
		<itemizedlist>
			<listitem>Primary Domain Controller</listitem>
			<listitem>Backup Domain Controller</listitem>
			<listitem>ADS Domain Controller</listitem>
		</itemizedlist>
	</listitem>
	<listitem><para>Domänen Mitgliedsserver</para>
		<itemizedlist>
			<listitem>Active Directory Domain Server</listitem>
			<listitem>NT4 Style Domain Domain Server</listitem>
		</itemizedlist>
	</listitem>
	<listitem><para>Stand-alone Server</para></listitem>
</itemizedlist>

<para>
Die Kapitel über Domänen Controller, Backup Domänen Controllern und Domänen Mitgliedschaft
enthalten sachdienliche Informationen für die Samba Konfiguration für jeden dieser Serverrollen.
Wir möchte den Leser ermutigen sich mit diesen Informationen vertraut zu machen.
</para>

</sect1>

<sect1>
<title>Samba Sicherheitsmodi</title>


<para>
<indexterm><primary>Security Mode</primary></indexterm>
<indexterm><primary>security</primary></indexterm>
In dieser Sektion werden die Funktionen und Zwecke der Samba Sicherheits Modi beschrieben.
Es ist wichtig zu verstehen wie jede der Sicherheitsmöglichkeiten, die Samba bietet, arbeitet
und wie die Windows Clients konfiguriert werden müssen, damit die Sicherheit und
Funktionstüchtigkeit gewährleistet ist.
</para>

<para>
In der SMB/CIFS Netzwerkwelt gibt es nur zwei Arten der Sicherheit: <emphasis>User Level</emphasis>
und <emphasis>Share Level</emphasis>. Wir beziehen uns auf diese beiden Arten als: <emphasis>User
Level</emphasis>. Durch Realisierung dieser beiden Security Arten bietet Samba flexibilitäten die
nicht in Microsoft NT4/200x Servern enthalten sind. Derzeit unterstützt Samba die <emphasis>Share
Level</emphasis> Sicherheit nur in einem Weg, dafür aber vier Wege die <emphasis>User Level</emphasis>
Sicherheit. Zusammen gesehen nennen wir die Samba Sicherheiten <emphasis>Sicherheits Modi</emphasis>.
Sie sind bekannt als: <emphasis>SHARE</emphasis>, <emphasis>USER</emphasis>,
<emphasis>DOMAIN</emphasis>, <emphasis>ADS</emphasis>, und <emphasis>SERVER</emphasis> modi die in diesem
Kapitel behandelt werden.
</para>

<para>
Ein SMB Server sagt dem Client während des Startens mit welcher Sicherheitsstufe der SMB Server läuft,
hierbei gibt es zwei Optionen: Share Level und User Level.
So wie diese beiden Möglichkeiten den Client erreichen beeinflussen sie ihn in der Art, wie er sich
selbst authentifiziert. Es beeinflusst den nicht direkt die Art wie der Samba Server die Sicherheit
handhabt. Klingt ein wenig merkwürdig, aber es passt zu dem Weg wie SMB arbeitet. Bei SMB wird alles
vom Client initiert und kontrolliert und der Server teilt dem Client nur mit was Verfügbar bzw. erlaubt ist.
</para>

<sect2>
<title>User Level Sicherheit</title>

<para>
Der einfachheit halber möchten wir zuerst die User Level Sicherheit erläutern.
In dieser Sicherheitsstufe sendet der Client einen Session Setup Request und direkt darauf
folgend eine Protocol Absprache. Diese Anfrage liefert einen Benutzernamen und ein Passwort,
die der Server entweder akkzeptiert oder die Benutzernamen/Passwort Kombination verweigert.
An diesem Punkt hat der Server keine Ahnung, welche Freigabe der Client eventuell aufrufen wollte,
es wird nur durch folgende Punkte eine Entscheidung zur <emphasis>Annahme</emphasis> oder der
<emphasis>Verweigerung</emphasis> getroffen:

</para>

<orderedlist>
<listitem><para>dem Benutzernamen/Passwort.</para></listitem>
<listitem><para>dem Namen des Client PCs.</para></listitem>
</orderedlist>

<para>
Wenn der Server den Benutzernamen mit dem entsprechenden Passwort akkzeptiert
erwartet der Client Freigaben zu binden (unter Verwendung einer <emphasis>Baum
Verbindung</emphasis>) ohne ein weiteres mal das Passwort zu nennen. Der Client
geht davo aus, dass alle Zugriffsrechte durch den Benutzernamen/Passwort aus
dem <emphasis>Session Setup</emphasis> geregelt werden.
</para>

<para>
Es ist ebenfalls möglich, dass ein Client verschiedene <emphasis>session setup</emphasis> Anfragen,
sendet. Wenn der Server darauf antwortet vergibt er dem Client eine <emphasis>uid</emphasis>
als Authentifizierungs-Etikett. Der Client kann somit verschiedene Authentifizierungs Kontexte
aufrecherhalten (WinDD ,als Beispiel, ist eine Applikation die diese Verfahrensweise nutzt).
</para>

<sect3>
<title>Beispiel Konfiguration</title>

<para>
Die &smb.conf; Parameter die die Sicherheitsstufe auf security setzt lautet:
</para>

<para><smbconfblock>
<smbconfoption><name>security</name><value>user</value></smbconfoption>
</smbconfblock></para>

<para>
Dies ist die Standard Einstellung seit Samba-2.2.x.
</para>

</sect3>

</sect2>
<sect2>
<title>Share Level Sicherheit</title>

<para>
Bei der Share Level Sicherheit authentifiziert sich der Client selbst bei jedem
Aufruf einer Freigabe mit einem Passwort. Es wird nicht explizit ein Benutzername
vom Client zum Server gesendet. Der Client erwartet ein Passwort welches mit jeder
Freigabe verbunden wird, somit hat Samba die Aufgabe heraus zu finden welchen
Benuternamen der Client verwenden möchte. Einige kommerzielle SMB Server wie NT
assoziieren Passwörter direkt mit Freigaben bei der Share Level Sicherheit, Samba
im Gegensatz arbeitet mit dem UNIX Authentifizierung Schema welches ein Benutzer/Passwort
Paar statt einem Share/Passwort Paar erwartet.
</para>

<para>
Um die MS Windows Netzwerkparallele zu verstehen hier ein wichtiger Gedanke für die Bedingung
von Windows 9x/Me wo jemand einen Ordner Freigeben kann welcher Nur-Lese oder Vollzugriff mit
oder ohne Passwort haben kann.
</para>

<para>
Viele Clients senden ein Session Setup auch dann wenn der Server als Share Level Sicherheit läuft.
Sie übergeben normalerweise einen gültigen Benutzernamen den sich Samba in einer Liste der
möglichen Benutzernamen merkt. Wenn nun der Client eine Tree-connection macht nimmt der Samba Server
den Namen der Freigabe in seine Liste auf (nützlich für Freigaben des Heimatverzeichnisses) und jeder
Benutzer in des <smbconfoption><name>user</name></smbconfoption> Parameters in der &smb.conf; wird
mit dem gesendeten Passworts überprüft. Wenn nun durch den anfänglich gesendeten Benutzernamen
und dem für das Share gesendete Passwort eine übereinstimmung gefunden wird ist der Client
berechtigt auf dieses Share zu zugreifen.
</para>

<sect3>
<title>Beispiel Konfiguration</title>

<para>
Der &smb.conf; Parameter der die Sicherheitsstufe auf Share Level Sicherheit setzt:
</para>

<para><smbconfblock>
<smbconfoption><name>security</name><value>share</value></smbconfoption>
</smbconfblock></para>

<para>
Es gibt Berichte, dass neue MS Windows Clients nicht mit Servern die im Share Level Sicherheitsmodus
arbeiten nicht arbeiten möchten. Wir möchten verstärkt davor warnen im Share Level Modus zu arbeiten.
</para>

</sect3>
</sect2>

<sect2>
<title>Domänen Sicherheitsmodus (User Level Security)</title>

<para>
<indexterm><primary>Domain Member</primary></indexterm>
Wenn Samba im <smbconfoption><name>security</name><value>domain</value></smbconfoption> Modus betrieben wird,
hat der Server einen Trust Account (Maschinen Account) und reicht alle Authentifizierungs Anfragen weiter
zu den Domänen Controllern. Mit anderen Worten: Diese Konfiguration macht den Samba Server zu einen
Domänen Mitglied.
</para>

<sect3>
<title>Beispiel Konfiguration</title>
<para><emphasis>
Samba als Domänen Mitglieds Server
</emphasis></para>


<para>
<indexterm><primary>Server Type</primary><secondary>Domain Member</secondary></indexterm>
Diese Art den Server zu betreiben benötigt folgende Parameter in der &smb.conf;:
</para>

<para><smbconfblock>
<smbconfoption><name>security</name><value>domain</value></smbconfoption>
<smbconfoption><name>workgroup</name><value>&example.workgroup;</value></smbconfoption>
</smbconfblock></para>

<para>
Damit dies Funktioniert müssen folgende Schritte unternommen werden:
<indexterm><primary>net</primary><secondary>rpc</secondary></indexterm>
<indexterm><primary>Domain Member</primary><secondary>joining</secondary></indexterm>
</para>


<procedure>
        <step><para>Richten Sie einen Maschinen Account für den Samba Server ein, benutzen
        Sie dafür den Server Manager.
        </para></step>

        <step><para>Auf dem UNIX/Linux System führen Sie folgendes aus:</para>

			<para><screen>&rootprompt;<userinput>net rpc join -U administrator%password</userinput></screen></para>
		</step>
</procedure>

<note><para>
Samba-2.2.4 und spätere Versionen können durch ausführen von folgendem Befehl automatisch einer NT4 Domäne beitreten:
<screen>
&rootprompt;<userinput>smbpasswd -j <replaceable>DOMÄNEN-NAMEN</replaceable> -r <replaceable>PDC_NAME</replaceable> \
	 -U Administrator%<replaceable>password</replaceable></userinput>
</screen>
Samba 3 kann das gleiche mit folgendem Kommando:
<screen>
&rootprompt;<userinput>net rpc join -U Administrator%<replaceable>password</replaceable></userinput>
</screen>
Mit Samba 3 ist es nicht nötig den <replaceable>DOMÄNEN-NAMEN</replaceable> oder den
<replaceable>PDC_NAME</replaceable> anzugeben da Samba 3 sich diese Informationen aus der &smb.conf;
holt.
</para></note>

<para>
Diese Art der Authentisierung zu nutzen benötigt einen Standard Unix Account, damit für jeden
User eine gültige UNIX UserID existiert die vom entfernten Windows Domänen Controller authentisiert
werden kann. Es spricht allerdings nichts dagegen, dass es diesem UNIX Account verboten wird sich ein
zu loggen was bei MS Windows nicht möglich ist. Das blocken eines solchen UNIX Accounts kann durch
setzen einer nicht Login fähigen Shell in der <filename>/etc/passwd</filename> geschehen (z.B.
/bin/false als Shell).
</para>

<para>
Eine Alternative zum assoziieren von UIDs zu Windows User mit einem Samba Mitgliedsserver wird
im Kapitel <link linkend="winbind">Winbind</link> beschrieben.
</para>

<para>
Für weitere Informationen Domänen Mitgliedschaft betreffend lesen Sie bitte
<link linkend="domain-member">hier</link>.
</para>

</sect3>
</sect2>

<sect2>
<title>ADS Sicherheits Modus (User Level Security)</title>

<para>
Sowohl Samba 2.2 als auch Samba 3 können einer ADS Domäne beitreten. Dies ist
allerdings nur dann möglich, wenn die ADS im Ursprungs Modus betrieben wird.
Active Directory im ursprünglichen Modus erlaubt gänzlich die Mitgliedschaft
von NT4 artigen Mitgliedern. Dies ist wiedersprüchlich im verbreiteten Glauben.
Active Directory in diesem Zustand verhindert nur den Einsatz von Backup Domänen
Controllern auf NT4 Basis.
</para>

<para>
Wenn Sie ADS benutzen und mit Samba 3 starten können Sie der ADS als normales
Active Directory Mitglied beitreten. Warum Sie das tun sollten? Ihre
Sicherheitsrichtlinien könnten die NT kompatibilen Authentifizierungsprotokolle
schlichtweg verweigern. Wenn alle Server in ihrem Netzwerk Windows 2000 und höher
nutzen würde Samba als NT4-artiges Domänen Mitglied NT-kompatibele
Authentifizierungsdaten benötigen. Samba im AD-Mitglieds modus allerdings kann auch
Kerberos Tickets auswerten.
</para>

<sect3>
<title>Beispiel Konfiguration</title>

<para><smbconfblock>
<smbconfoption><name>realm</name><value>your.kerberos.REALM</value></smbconfoption>
<smbconfoption><name>security</name><value>ADS</value></smbconfoption>
</smbconfblock></para>

<para>
Folgende Parameter würden benötigt:
</para>

<para><smbconfblock>
<smbconfoption><name>password server</name><value>your.kerberos.server</value></smbconfoption>
</smbconfblock></para>

<para>
Für weitere Informationen zu dieser Konfigurationsoption lesen Sie bitte unter
<link linkend="domain-member">Domänen-Mitglied</link> und <link linkend="ads-member">ADS-Mitglied</link>
weiter.
</para>

</sect3>
</sect2>

<sect2>
<title>Server Security (User Level Security)</title>

<para>
Der Server Security Modus ist noch aus den Zeiten in denen Samba nicht als Domänen-Mitglied
betrieben werden konnte übrig geblieben. Sie sollten diesen Modus nicht verwenden da er
viele Nachteile mit sich bringt. Zum Beispiel:
</para>

<itemizedlist>
	<listitem><para>Potentielle Account sperren auf MS Windows NT4/200x Passwort Servern.</para></listitem>
	<listitem><para>Sicherheitslücke das der Passwortserver der Konfiguriert ist nicht der ist den man wirklich nutzen möchte.</para></listitem>
	<listitem><para>Funktioniert nicht mit Winbind, was nötig ist um Profile auf entfernten Systemem zu speichern.</para></listitem>
	<listitem><para>Dieser Modus öffnet Verbindungen zum Passwortserver und hält diese offen.</para></listitem>
	<listitem><para>Die Sicherheit des Samba Servers bricht auf's schlimmste zusammen, wenn der Passwort Server mittendrin abgeschaltet werden sollte.</para></listitem>
	<listitem><para>In diesem Modus gibt es KEINEN Sicherheits Account in der Domäne um sicherzustellen, dass der Passwortserver der von Samba befragt wird auch zur Domäne gehört.</para></listitem>
</itemizedlist>

<para>
Im Server Sicherheits Modus gibt der Samba Server dem Client vor im User Level Sicherheitsmodus
zu aggieren und der Client schickt daraufhin ein session setup wie zuvor beschrieben.
Der Samba Server nimmt nun den Benutzernamen und das Passwort des Clients und schickt diese Daten
exakt so wie er sie bekommen hat weiter zum <smbconfoption><name>password server</name></smbconfoption>.
Wenn dieser Passwort Server mit den Account Daten einverstanden ist und als User Level Sicherheit
betrieben wird akkzeptiert der Samba Server die Client Verbindung. Dies erlaubt dem Samba Server
einen anderen SMB Server als <smbconfoption><name>password server</name></smbconfoption> zu nutzen.
</para>

<para>
Sie sollten wissen, dass am Anfang all dessen der Server dem Client auch mitteilt ob
eine Verschlüsselung der Daten stattfinden soll, wenn dies auf dem Samba Server konfiguriert ist
sende der Server dem Client einen Kryptischen Schlüssel mit dem dann die Daten vom Client
verschlüsselt werden. Samba unterstützt diese Verschlüsselung als Standard.
</para>

<para>
Der Parameter <smbconfoption><name>security</name><value>server</value></smbconfoption>
bedeutet, dass der Samba Server den Clients mitteilt das er im <emphasis>user modus</emphasis> betrieben
wird aber alle Passwort anfragen an einen anderen <emphasis>user modus</emphasis> Server
weiterleitet. Hierzu benötigt man einen weiteren Parameter <smbconfoption><name>password
server</name></smbconfoption> der auf den echten Authentifizierungs Server verweist.
Dieser Passwort Server kann ein anderer Samba Server oder ein Windows NT Server sein.
</para>

<note><para>
Falls Sie Samba im <emphasis>Server Sicherheitsmodus</emphasis> betreiben ist es äusserst 
wichtig, dass Sie den Parameter <emphasis>password server</emphasis> auf den genauen NetBIOS 
Maschinen Namen des Authentifizierungsservers angeben. Samba ist nicht in der Lage dies über 
NetBIOS Namensauflösung zu ermitteln, da die Auswahl des Authentifizierungsservers beliebig ist 
und nicht an einem Domainnamen ermittelt werden kann. Ergebnis hieraus: Ein Samba Server im 
<emphasis>Server Security Mode</emphasis> arbeitet so wie man es als workgroup mode kennt.
</para></note>

<sect3>
<title>Beispiel Konfiguration</title>
<para><emphasis>
Benutzung von MS Windows NT als Authentifizierungsserver.
</emphasis></para>

<para>
Diese Methode betrifft folgende Parameter in der &smb.conf; Datei:
</para>

<para><smbconfblock>
<smbconfoption><name>encrypt passwords</name><value>Yes</value></smbconfoption>
<smbconfoption><name>security</name><value>server</value></smbconfoption>
<smbconfoption><name>password server</name><value>"NetBIOS_name_of_a_DC"</value></smbconfoption>
</smbconfblock></para>


<para>
Es gibt zwei Wege um ein Username und Passwort Paar auf G&uuml;ltigkeit zu &uuml;berprüfen.
Der eine nutzt die Information der Antwort die als Teil der Authentisierungs Nachricht bereitgestellt wird
und der andere Weg wertet nur den Fehlercode aus.
</para>
<para>
Die Kehrseite dieser Art der Konfiguration ist die Tatsache, dass aufgrund der 
Sicherheit Samba dem Passwortserver einen Benutzernamen und Passwort sendet und 
für den Fall dass diese Accountdaten vom Passwortserver abgelehnt werden wechselt 
Samba zu einem alternativen Modus der Identifikation. Sollte das Netzwerk einen 
Benutzer nach einer gewissen Anzahl von fehlgeschlagenen Logins sperren wird dies 
in dieser Konfig der Fall sein können.
</para>

<para>
Diese Art der Authentifizierung benötigt einen standard Unix Account für den User der 
allerdings für andere System Logons blockiert werden darf.
</para>

</sect3>
</sect2>

</sect1>

<sect1>
<title>Password Prüfung</title>

<para>
MS Windows clients können verschlüsselte Passwörter (bekannt als NTLMv1 und MTLMv2) 
zur Anmeldung nutzen oder aber auch Klartextpasswörter für einfache Passwortbasierende 
Authentifizierung nutzen. Man sollte sich deutlich machen, dass das SMB Protokol nicht 
vorsieht dass sowohl Klartext als auch Verschlüsselte Passwörter innerhalb einer 
Authentifizierungs Anfrage über ein Netzwerk verschickt werden.
</para>

<para>
Wenn verschlüsselte Passwörter verwendet werden gibt es zwei verschiedene Arten diese 
zu verschlüsseln:
</para>

<itemizedlist>
        <listitem><para>
	Ein MD5 hash des Passwort (Unicode). Besser bekannt als NT hash.
        </para></listitem>

        <listitem><para>
	Das Passwort wird in Großbuchstaben konvertiert, auf eine länge von 
	insgesamt 14 byte gekürzt oder verlängert. Anschließend wird dieser 
	String mit 5 byte des NULL Zeichens am Ende erweitert und zu zwei 
	passenden 56-bit DES Schlüsseln zur Verschlüsselung eines <quote>magic</quote> 
	8-byte Wertes verwendet. Das Resulutat hierraus ist der 16 byte LanMan hash.
        </para></listitem>
</itemizedlist>

<para>
MS Windows 95 vor SP 1, MS Windows NT in den Versionen 3.x und 4.0 vor SP3 
unterstützen beide Arten der Passwort Authentifizierung. Alle Versionen von 
MS Windows nach den oben genannten Versionen unterstützen standardmäßig nicht 
mehr die Verwendung von Klartext-Passwörtern.
</para>

<para>
MS Windows clients haben die Eigentart Netzwerk Mappings zu verlieren, wenn diese 
länger als 10 Minuten nicht mehr verwendet wurden. Wenn der User ein Mapping nach 
dieser Zeit verwenden will baut der Client die Verbindung erneut auf und verwendet 
dabei eine zwischengespeicherte copy des Passworts.
</para>

<para>
Wenn man bei Windows durch ändern der Registry Einträge die Verwendung von 
Klartext-Passwörtern wieder einschalten würde entfällt allerdings der oben 
beschriebene Support zum zwischenspeichern der Passwörter. Dies hat zur Folge, 
dass es nicht gelingen wird, wenn ein Client eine Verbindung nach dem o.g. 
Timeout verworfen hat, diese wieder von alleine herstellen zu können. Es 
ist also definitiv keine gute Idee bei diesen Clients
Klartext-Passwörter zu verwenden.
</para>

<para>
Folgende Parameter können als workaround für Windows 9x/Me Clients verwendet werden, 
die die Benutzernamen und Passwörter in Großbuchstaben umwandeln, bevor sie zum SMB 
Server verschickt werden (Nur bei verwendung von Klartext-Passwörtern).
</para>

<para><smbconfblock>
<smbconfoption><name>password level</name><value><replaceable>integer</replaceable></value></smbconfoption>
<smbconfoption><name>username level</name><value><replaceable>integer</replaceable></value></smbconfoption>
</smbconfblock></para>

<para>
<!-- Hendrik workmark -->
By default Samba will convert to lower case the username before attempting to lookup the user
in the database of local system accounts. Because UNIX usernames conventionally
only contain lower-case characters, the <smbconfoption><name>username level</name></smbconfoption> parameter
is rarely needed.
</para>

<para>
However, passwords on UNIX systems often make use of mixed-case characters.
This means that in order for a user on a Windows 9x/Me client to connect to a Samba
server using cleartext authentication, the <smbconfoption><name>password level</name></smbconfoption>
must be set to the maximum number of upper case letters that <emphasis>could</emphasis>
appear in a password. Note that if the server OS uses the traditional DES version
of crypt(), a <smbconfoption><name>password level</name></smbconfoption> of 8 will result in case
insensitive passwords as seen from Windows users. This will also result in longer
login times as Samba has to compute the permutations of the password string and
try them one by one until a match is located (or all combinations fail).
</para>

<para>
The best option to adopt is to enable support for encrypted passwords wherever
Samba is used. Most attempts to apply the registry change to re-enable plain-text
passwords will eventually lead to user complaints and unhappiness.
</para>

</sect1>

<sect1>
<title>Common Errors</title>

<para>
We all make mistakes. It is okay to make mistakes, as long as they are made in the right places
and at the right time. A mistake that causes lost productivity is seldom tolerated, however a mistake
made in a developmental test lab is expected.
</para>

<para>
Here we look at common mistakes and misapprehensions that have been the subject of discussions
on the Samba mailing lists. Many of these are avoidable by doing your homework before attempting
a Samba implementation. Some are the result of a misunderstanding of the English language. The
English language, which has many phrases that are potentially vague and may be highly confusing
to those for whom English is not their native tongue.
</para>

<sect2>
<title>What Makes Samba a Server?</title>

<para>
To some the nature of the Samba <emphasis>security</emphasis> mode is obvious, but entirely
wrong all the same. It is assumed that <smbconfoption><name>security</name><value>server</value></smbconfoption> means that Samba
will act as a server. Not so! This setting means that Samba will <emphasis>try</emphasis>
to use another SMB server as its source for user authentication alone.
</para>

</sect2>

<sect2>
<title>What Makes Samba a Domain Controller?</title>

<para>
The &smb.conf; parameter <smbconfoption><name>security</name><value>domain</value></smbconfoption> does not really make Samba behave
as a Domain Controller. This setting means we want Samba to be a Domain Member.
</para>

</sect2>

<sect2>
<title>What Makes Samba a Domain Member?</title>

<para>
Guess! So many others do. But whatever you do, do not think that <smbconfoption><name>security</name><value>user</value></smbconfoption>
makes Samba act as a Domain Member. Read the manufacturer's manual before the warranty expires. See
<link linkend="domain-member"></link> for more information.
</para>

</sect2>


<sect2>
<title>Constantly Losing Connections to Password Server</title>

<para>
	<quote>
Why does server_validate() simply give up rather than re-establish its connection to the
password server?  Though I am not fluent in the SMB protocol, perhaps the cluster server
process passes along to its client workstation the session key it receives from the password
server, which means the password hashes submitted by the client would not work on a subsequent
connection whose session key would be different. So server_validate() must give up.</quote>
</para>

<para>
Indeed. That's why <smbconfoption><name>security</name><value>server</value></smbconfoption>
is at best a nasty hack. Please use <smbconfoption><name>security</name><value>domain</value></smbconfoption>;
<smbconfoption><name>security</name><value>server</value></smbconfoption> mode is also known as pass-through authentication.
</para>

</sect2>

</sect1>

</chapter>
