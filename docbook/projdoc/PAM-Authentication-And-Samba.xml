<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="pam">
<chapterinfo>
	&author.jht;
	<author>
		<firstname>Stephen</firstname><surname>Langasek</surname>
		<affiliation>
			<address><email>vorlon@netexpress.net</email></address>
		</affiliation>
	</author>
	<author>&person.flex;<contrib>Deutsche Übersetzung</contrib></author>
    <pubdate>May 31, 2003</pubdate>
</chapterinfo>
 
<title>PAM-basierte verteilte Authentifizierung</title>

<para>
Dieses Kapitel hilft Ihnen bei der Verwendung von Winbind basierender Authentifikation auf jedem PAM fähigen 
UNIX/Linux System. Winbind kann verwendet werden um User-Level APPLICATION ACCESS Authentifizierung von jeder
MS Windows NT Domäne, MS Windows 200x Active Director-basierden Domäne oder einer Samba-basierten Domänen
Umgebung zu erlauben.

Winbind can be used to enable User-Level application access authentication
from any MS Windows NT Domain, MS Windows 200x Active Directory-based
domain, or any Samba-based domain environment. 

Es sollte ihnen auch helfen PAM-basierte lokale host Zugriffs Kontrollen, die ihrer Samba Konfiguration entsprechen,
zu konfigurieren.
</para>

<para>
Zusätzlich zur Konfiguration von Winbind in PAM, werden Sie die PAM Management Möglichkeiten kennenlernen wie z.B.
die Verwendung von Werkzeugen wie <filename>pam_smbpass.so</filename> zu Ihrem Vorteil.
</para>

<note><para>
Die Verwendung von Winbind erfordert mehr als nur die PAM Konfiguration alleine.
Für mehr Informationen zu Winbind schauen Sie sich bitte <link linkend="winbind"/> an.
</para></note>

<sect1>
<title>Eigenschaften und Vorteile</title>

<para>
Eine Vielzahl von UNIX Systemen (z.B. Sun Solaris), sowie die xxxxBSD Familie und Linux
benutzen inzwischen die Pluggable Authentication Modules (PAM) Dienste um die gesamte Authentifikation, Authorisation
und Ressourcen Kontroll Dienste anzubieten. Wollte man vor PAM eine Alternative zur systeminternen Passworddatenbank
(<filename>/etc/passwd</filename>) musste man auch Änderungen oder Alternativen zu allen Programmen finden, die
Sicherheitsdienste anbieten wie z.B.  <command>login</command>, <command>passwd</command>, <command>chown</command>
usw.
</para>

<para>
PAM liefert einen Mechanismus der diese Sicherheitsprogramme von der darunterliegenden Authentifizierung/Authorisierung
trennt. PAM wird konfiguriert in dem man Änderungen an <filename>/etc/pam.conf</filename> vornimmt (Solaris), oder indem
man die einzelnen Dateien die in <filename>/etc/pam.d</filename> aufgelistet sind, anpasst bzw. verändert.
</para>

<para>
Auf PAM-fähigen UNIX/Linux Systemen ist es ein einfaches Unterfangen irgend ein Authentifizierungs BACKEND
zu konfigurieren solange die entsprechenden dynamisch ladbaren Modul Bibliotheken vorhanden sind.
Das BACKEND kann auf dem lokalen System vorhanden sein oder, zentralisiert, auf einem entfernten Server.
</para>

<para>
PAM unterstützte Module sind vorhanden für:
</para>

<variablelist>
	<varlistentry><term><filename>/etc/passwd</filename></term><listitem>
		<para>
		Es gibt mehrere PAM Module die mit dieser standart UNIX Benutzer Datenbank interagieren.
		Die bekanntesten sind <filename>pam_unix.so</filename>, <filename>pam_unix2.so</filename>, <filename>pam_pwdb.so</filename>
		und <filename>pam_userdb.so</filename>.
		</para>
	</listitem></varlistentry>

	<varlistentry><term>Kerberos</term><listitem>
		<para>
		Das <filename>pam_krb5.so</filename> Modul erlaubt die Nutzung von jedem Kerberos fähigem Server.
		Dieses Tool kann mit MIT Kerberos, Heimdal Kerberos, und möglicherweise mit Microsoft Active Directory
		(fals eingeschaltet) benutzt werden.
		</para>
	</listitem></varlistentry>

	<varlistentry><term>LDAP</term><listitem>
		<para>
		Das <filename>pam_ldap.so</filename> Modul erlaubt die Benutzung von jedem LDAP v2 oder v3 kompatiblem
		BACKEND server. Weit verbreitete LDAP BACKEND Server sind z.B. OpenLDAP v2.0 und v2.1,
		Sun ONE iDentity Server, Novell eDirectory Server, Microsoft Active Directory. 
		</para>
	</listitem></varlistentry>

	<varlistentry><term>NetWare Bindery</term><listitem>
		<para>
		Das <filename>pam_ncp_auth.so</filename> Modul erlaubt die Authentifizierung auf jedem bindery
		fähigem NetWare Core Protokoll basiertem Server.
		</para>
	</listitem></varlistentry>

	<varlistentry><term>SMB Password</term><listitem>
		<para>
		Dieses Modul, namentlich <filename>pam_smbpass.so</filename>, erlaubt die Benutzerauthentifizierung
		mit dem passdb Backend dass in der &smb.conf; file angegeben ist.
		</para>
	</listitem></varlistentry>

	<varlistentry><term>SMB Server</term><listitem>
		<para>
		Das <filename>pam_smb_auth.so</filename> Modul ist das original MS Windows Netzwerk authentifizierungs
		Werkzeug. Dieses Modul ist eigentlich überholt seit es das Winbind Modul gibt.
		</para>
	</listitem></varlistentry>

	<varlistentry><term>Winbind</term><listitem>
		<para>
		Das <filename>pam_winbind.so</filename> Modul erlaubt Samba sich mit jedem MS Windows Domain
		Controller zu authentifizieren. Es kann genauso benutzt werden um Benutzern den Zugang zu irgendeiner
		PAM-fähigen Applikation zu erlauben.
		</para>
	</listitem></varlistentry>

	<varlistentry><term>RADIUS</term><listitem>
		<para>
		Es gibt auch ein PAM RADIUS (Remote Access Dial-In User Service) authentifizierungs
		Modul. In den meisten Fällen muss der Administrator den Quellcode suchen und dieses Modul selbst
		kompilieren und installieren. RADIUS Protokolle werden von vielen Routern und Terminal Servern
		benutzt.
		</para>
	</listitem></varlistentry>
</variablelist>

<para>
Von diesen Modulen stellt Samba nur das <filename>pam_smbpasswd.so</filename> und das <filename>pam_winbind.so</filename> Modul 
zur Verfügung.
</para>

<para>
Einmal konfiguriert erlauben diese Module eine bemerkenswerte Stufe an Flexibilität und 
die Benutzung von verteilten Samba Domänen Kontrollern die wiederum eine effiziente 
Ausnutzung der Bandbreite in grossen Netzwerken mit PAM-fähigen Systemen erlauben.
Richtig eintesetzt, erlaubt dies eine zentrale Administration einer verteilten 
Authentifizierung von einer Einzelbenutzer Datenbank aus.  
</para>

</sect1>

<sect1>
<title>TECHNICAL DISCUSSION</title>

<para>
Pam wurde entworfen um dem Systemverwalter eine grosse Flexibilität in der Konfiguration
OF THE PRIVILEGE GRANTING APPLICATIONS OF THEIR SYSTEM. Die lokale Konfiguration der Systemsicherheit
die von PAM überwacht wird ist in einem dieser zwei Orte: Entweder in der einzelnen System file
<filename>/etc/pam.conf</filename>, oder dem  <filename>/etc/pam.d/</filename> Ordner
</para>

<sect2>
<title>PAM Konfigurations Syntax</title>

<para>
In diesem Kapitel sehen wir uns die richtige Syntax und die verschiedenen Optionen der Einträge in diesen
Dateien an. Bei PAM spezifische Zeichen ist die Gross- und Kleinschreibung egal. Die Modul Pfade hingegen 
sind empfindlich gegenüber der Gross- und Kleinschreibung, da sie auf Dateinamen
verweisen und diese die Schreibweise des Dateisystems wiedergeben. 
Die Empfindlichkeit der Argument der einzelnen Module gegenüber der Gross- und Kleinschreibung wird für jedes Modul
eigens festgelegt.
</para>

<para>
Zusätzlich zu den unten beschriebenen Zeilen gibt es noch zwei zusätzliche Zeichen die dem Systemadministrator
die Arbeit erleichtern: Auszukommentierende Zeilen werden mit einem <quote>#</quote> eingeleitet, welches 
in der nächsten Zeile die Gültigkeit verliert; Um Zeilen in einer Modulbeschreibung über dem Zeilenumbruch zu verlängern
kann ein <quote>\</quote> Zeichen verwendet werden.
</para>

<para>
Befindet sich das PAM authentifizierungs Modul (ladbare link bibliotheks Datei)
im Standardpfad so ist es nicht nötig den Pfad nochmal anzugeben. Befindet sich das
Modul ausserhalb dieses Pfades (unter Linux <filename>/lib/security</filename>) muss der
dieser wie folgt angegeben werden:
</para>

<para>
<programlisting>
auth  required  /anderer_pfad/pam_fremdes_module.so
</programlisting>
</para>

<sect3>
<title>Eigenschaften der <filename>/etc/pam.d</filename> Einträge</title>

<para>
Die restlichen Informationen in diesem Unterkapitel sind aus dem Linux-PAM Dokumentations Projekt
entnommen. Für mehr Informationen zu PAM, besuchen Sie diesen Link:<ulink url="http://ftp.kernel.org/pub/linux/libs/pam/">The Official Linux-PAM home page.</ulink>
</para>

<para>
Eine allgemeine Konfigurationszeile der <filename>/etc/pam.conf</filename> Datei hat folgende Form:
</para>

<para>
<programlisting>
Service-name	Modul-type	control-flag	Modul-path	Args.
</programlisting>
</para>

<para>
Hier beschreiben wir die Bedeutung dieser einzelnen Zeichen. Die zweite (und öfters angewendete)
Methode der Konfiguration von Linux-PAM ist durch Änderung des Inhalts des <filename>/etc/pam.d/</filename>
Ordners. Nachdem wir die obigen Zeicher erklärt haben, werden wir näher auf diese Methode eingehen.
</para>

<variablelist>
	<varlistentry><term>Service-name</term><listitem>
		<para>
		Der Name des Dienstes der mit diesem Eintrag verbunden ist. Meistens ist dies der herkömmliche Name
		der Anwendung. Zum Beispiel <command>ftpd</command>, <command>rlogind</command>, <command>su</command>
		usw.
		</para>

		<para>
		Es gibt einen speziellen Dienst Namen der für einen standard authentifizierungs Mechanismus reserviert ist,
		und zwar mit dem Namen <parameter>OTHER</parameter>, wobei es egal ist ob man ihn gross- oder kleinschreibt.
		Beachten Sie, dass falls bereits ein ein Modul für einen Dienst namentlich angegeben ist dieser Parameter
		ignoriert wird.
		</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>module-type</term><listitem>
                <para>
		Einer von (momentan) vier Typen von Modulen, die da wären:
		</para>

		<itemizedlist>
			<listitem><para>
			<parameter>auth:</parameter> 
			Dieser Modul Typ stellt zwei Aspekte der Benutzerauthentifizierung zur Verfügung.
			Erstens wird festgestellt, dass der Benutzer der ist, der er angibt zu sein indem der Benutzer von 
			der Applikation aufgefordert wird ein Password anzugeben oder sich sonst irgendwie zu authentifizieren.
			Zweitens kann dieses Modul Gruppenzugehörigkeiten erlauben (unabhängig vom Inhalt von <filename>/etc/groups
			</filename> welche oben behandelt wurde) oder andere Privilegien durch seine CREDENTIAL GRANTING PROPERTIES:

			above) or other privileges through its credential granting properties.
			</para></listitem>

			<listitem><para>
			<parameter>account:</parameter> Dieses Modul führt nicht-authentifizierungs-basiertes Benutzermanagement aus.
			Normalerweise wird es benutzt um den Zugang zu Diensten aufgrund der Tageszeit, momentan verfügbaren System
			ressourcen (maximale gleichzeitige Benutzer) oder vielleicht der Lage des <quote>root</quote> Logins auf der Konsole zu
			erlauben oder verweigern.
			</para></listitem>

			<listitem><para>
			<parameter>session:</parameter> Dieses Modul wird vor allem dazu verwendet um festzulegen was ausgeführt
			werden sollte bevor ein Benutzer einen Dienst benutzt oder beendet. Dies könnte zum Beispiel das Aufzeichnen
			von Information bezüglich dem Datenaustausch mit dem Benutzer oder das mounten von Ordnern usw. sein.
			</para></listitem>

			<listitem><para>
			<parameter>password:</parameter> Dieser letzte Modultyp wird gebraucht FOR UPDATING THE AUTHENTICATION
			TOKEN ASSOCIATED WITH THE USER. Normalerweise ist immer ein Modul für einen <quote>challenge/response</quote>
			-basierten authentifizierungs <parameter>(auth)</parameter> Modul Typen.
			</para></listitem>
		</itemizedlist>
		</listitem>
	</varlistentry>

	<varlistentry><term>control-flag</term><listitem>
                <para>
		Die control-flag wird bentutzt um festzulegen wie die PAM Bibliothek auf einen Erfolg oder Misserfolg
		des mit ihr verbundenen Moduls reagiert. Seit Module gestockt werden können (Module des gleichen Typs 
		nacheinander geschaltet so, dass eins nach dem anderen ausgeführt wird), legen die control-flags auch die
		relative Wichtigkeit dieser fest. Der Applikation wird nicht der Erfolg oder Misserfolg jedes Moduls in der 
		<filename>/etc/pam.conf</filename> Datei mitgeteilt, sondern sie erhält eine Zusammenfassung des Erfolgs
		oder Misserfolgs von der Linux-PAM Bibliothek. Die Reihenfolge in der diese Module ausgeführt werden ist
		die der Einträge in der <filename>/etc/pam.conf</filename>; Der Erste Eintrag wird als erstes ausgeführt und
		der Letzte zum Schluss. Ab Linux-PAM v0.60, kann diese control-flag mit einer von zwei Syntaxes angegeben
		werden.
		</para>
		

		<para>
		Die einfachere (und historische) Syntax für die Control-flag ist ein einzelnes Schlüsselwort welches
		die Wichtigkeit des Erfolgs oder Misserfolgs des Moduls festlegt. Es gibt vier solcher Schlüsselworte:
		<parameter>required, requisite, sufficient und optional</parameter>.
		</para>

		<para>
		Die Linux-PAM Bibliothek interpretiert diese Schlüsselwörter wie folgt:
		</para>

		<itemizedlist>
			<listitem><para>
			<parameter>required:</parameter> Dies gibt an dass der Efolg dieses Moduls essentiell für den Erfolg
			des mit diesem Modul verbunden Dienstes ist. Ein Misserfolg dieses Moduls wird dem Benutzer nicht
			mitgeteilt bevor nicht alle anderen Module (des selben Modul-typen) ausgeführt wurden.
			</para></listitem>

			<listitem><para>
			<parameter>requisite:</parameter> Gleich wie required, nur dass es im Falle eines Misserfolges die
			Kontrolle direkt an die Applikation zurückgegeben wird. Der Rückgabewert ist der gleiche wie bei einem
			Misserforlg des ersten Moduls. Diese Flag kann gesetzt werden um dem Benutzer die Möglichkeit zu nehmen
			über ein unsicheres Medium das Passwort einzugeben. Es wäre möglich dass dies einem Angreifer Informationen
			über Benutzernamen geben könnte. Dieser Möglichkeit sollte aber entgegengehalten werden dass sonst eventuell
			Passwörter durch eine feindliche Umgebung gehen könnten.
			</para></listitem>

                        <listitem><para>
                        <parameter>sufficient:</parameter> Der Erfolg dieses Moduls genügt damit die Linux-PAM Bibliothek ausgibt dass
			dieses Modul erfolgreich in seinem Zweck war. Im Fall, dass kein vorhergehendes wichtiges (<parameter> required</parameter>)
			Modul Misserfolg zurückgab, wird kein weiteres <quote>gestapeltes</quote> Modul ausgeführt (in diesem Fall werden auch keine
			weiteren wichtigen Module mehr ausgeführt). A failure of this module is not deemed
			as fatal to satisfying the application that this module-type has succeeded.
			</para></listitem>

                        <listitem><para>
                        <parameter>optional:</parameter> Wie der Name schon sagt, bedeutet diese Flag dass das dazugehörige Modul
			keinen kritischen Einfluss auf den Erfolg der Applikation des Benutzers hat. Wenn Linux-PAM festlegen muss
			ob ein Modul-Stapel erfolgreich war, werden diese Module normalwerweise ignoriert. Gibt jedoch kein vorhergehendes
			oder nachfolgendes Modul des Stapels eine definitve Rückgabe über den Erfolg, ist der Rückgabewert dieses Moduls ausschlaggebend
			für den Erfolg des Modul-Stapels. Ein Beispiel für diesen Fall wäre wenn die anderen Module eine Rückgabe wie 
			PAM_IGNORE geben würden.
			</para></listitem>
		</itemizedlist>

		<para>
		Die besser ausgearbeitete (und neuere) Syntax ist viel spezifischer und gibt dem Administrator mehr Möglichkeiten
		und Kontrolle wie der Benutzer authentifiziert wird. Diese Form der Kontroll Flaggen wird mit eckigen Klammern
		abgegrenzt und besteht aus einer Serie von <parameter>value=action</parameter> Zeichen.
		</para>

<para><programlisting>
[value1=action1 value2=action2 ...]
</programlisting></para>

		<para>
		Hier, ist <parameter>value1</parameter> einer der folgenden Rückgabewerte:
<screen>
<parameter>success; open_err; symbol_err; service_err; system_err; buf_err;</parameter>
<parameter>perm_denied; auth_err; cred_insufficient; authinfo_unavail;</parameter>
<parameter>user_unknown; maxtries; new_authtok_reqd; acct_expired; session_err;</parameter>
<parameter>cred_unavail; cred_expired; cred_err; no_module_data; conv_err;</parameter>
<parameter>authtok_err; authtok_recover_err; authtok_lock_busy;</parameter>
<parameter>authtok_disable_aging; try_again; ignore; abort; authtok_expired;</parameter>
<parameter>module_unknown; bad_item;</parameter> and <parameter>default</parameter>.
</screen>
</para>

		<para>
		Der letzte dieser <parameter>(default)</parameter> kann dafür benutzt 
		werden die ACTION für Rückgabwerte festzulegen für die dies nicht explizit angegeben wurde.
		</para>

		<para>
		Der <parameter>action1</parameter> kann ein positiver Integer sein oder eines der folgenden Zeichen:
		<parameter>ignore; ok; done; bad; die;</parameter> und <parameter>reset</parameter>. Ein positiver Integer,
		J, WHEN SPECIFIED AS ACTION, kann benutzt werden um anzugeben dass die nächsten J Module vom momentanen Modul-Stapel
		übersprungen werden. Wird dies richtig angewendet kann der Administrator einen hoch entwickelten Modul-Stapel mit
		mehrer Ausführungsmöglichkeiten bauen. Welche Möglichkeit schlussendlich genommen wird, kann mit der Reaktion der
		einzelnen Module bestimmt werden.
		</para>

		<itemizedlist>
			<listitem><para>
			<parameter>ignore:</parameter> Wird dieser Parameter mit in einem Modul-Stapel angewendet, beeinflusst
			die Rückgabe dieses Moduls nicht den Rückgabewert den die Applikation vom gesamten Stapel erhält.
			</para></listitem>

			<listitem><para>
                        <parameter>bad:</parameter> Dies gibt an dass der Rückgabewert dieses Modul ausschlaggebend ist für das
			fehlschlagen des Moduls. Wenn dieses Modul das erste ist, das erfolglos durchgeführt wir, wird sein Rückgabewert
			für den Status des gesamten Modul-Stabels verwendet.
			</para></listitem>

                        <listitem><para>
                        <parameter>die:</parameter> Gleich wie <parameter>bad</parameter> nur mit dem Effekt dass der Modul-Stabel und PAM sofort abgebrochen
			werden und zur Anwendung zurückgekehrt wird.
			</para></listitem>

                        <listitem><para>
                        <parameter>ok:</parameter> Dieser Parameter teilt PAM mit das der Administrator glaubt dieser Rückgabewert
			sollte direkt den des gesamten Modul-Stapels beeinflussen. In anderen Worten, wenn der vorherige Wert des
			Stapels einen Rückgabewert PAM_SUCCESS enthalten hätte, wird er jetzt von dem dieses Moduls überschrieben.
			Achtung, weist jedoch der vorherige Wert auf den Misserfolg eines Moduls hin, so wird der <parameter>ok</parameter>
			nicht verwendet um diesen zu überschreiben.
			</para></listitem>

                        <listitem><para>
                        <parameter>done:</parameter> Gleich wie <parameter>ok</parameter> mit dem Effekt dass der Modul-Stapel und PAM sofort abgebrochen
			beendet werden und zur Anwendung zurückgekehrt wird.
			</para></listitem>

                        <listitem><para>
                        <parameter>reset:</parameter> Löscht den Speicher des Rückgabewertes des Moduls und startet mit dem nächsten
			gestapelten Modul neu.
			</para></listitem>
		</itemizedlist>

		<para>
		Jedes dieser vier Schlüsselworte: <parameter>required; requisite; sufficient;</parameter> und <parameter>optional</parameter>,
		hat einen gleichwertigen Ausdruck in der [...] Syntax:
		</para>

		<para>
		<itemizedlist>
			<listitem><para>
			<parameter>required</parameter> ist gleichwertig wie <parameter>[success=ok new_authtok_reqd=ok ignore=ignore default=bad]</parameter>.
			</para></listitem>

			<listitem><para>
			<parameter>requisite</parameter> ist gleichwertig wie <parameter>[success=ok new_authtok_reqd=ok ignore=ignore default=die]</parameter>.
			</para></listitem>

			<listitem><para>
			<parameter>sufficient</parameter> ist gleichwertig wie <parameter>[success=done new_authtok_reqd=done<?latex \linebreak ?> default=ignore]</parameter>.
			</para></listitem>

			<listitem><para>
			<parameter>optional</parameter> ist gleichwertig wie <parameter>[success=ok new_authtok_reqd=ok default=ignore]</parameter>.
			</para></listitem>
		</itemizedlist>
		</para>

		<para>
		Just to get a feel for the power of this new syntax, here is a taste of what you can do with it. With Linux-PAM-0.63,
		the notion of client plug-in agents was introduced. This is something that makes it possible for PAM to support
		machine-machine authentication using the transport protocol inherent to the client/server application. With the
		<parameter>[ ... value=action ... ]</parameter> control syntax, it is possible for an application to be configured
		to support binary prompts with compliant clients, but to gracefully fall over into an alternative authentication
		mode for older, legacy applications.
		</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>module-path</term><listitem>
		<para>
		The path-name of the dynamically loadable object file; the pluggable module itself. If the first character of the
		module path is <quote>/</quote>, it is assumed to be a complete path. If this is not the case, the given module path is appended
		to the default module path: <filename>/lib/security</filename> (but see the notes above).
		</para>

		<para>
		The arguments are a list of tokens that are passed to the module when it is invoked, much like arguments to a typical
		Linux shell command. Generally, valid arguments are optional and are specific to any given module. Invalid arguments
		are ignored by a module, however, when encountering an invalid argument, the module is required to write an error
		to syslog(3). For a list of generic options, see the next section.
		</para>

		<para>
		If you wish to include spaces in an argument, you should surround that argument with square brackets. For example:
		</para>

<para><programlisting>
squid auth required pam_mysql.so user=passwd_query passwd=mada \
db=eminence [query=select user_name from internet_service where \
user_name=<quote>%u</quote> and password=PASSWORD(<quote>%p</quote>) and service=<quote>web_proxy</quote>]
</programlisting></para>

		<para>
		When using this convention, you can include <quote>[</quote> characters inside the string, and if you wish to have a <quote>]</quote>
		character inside the string that will survive the argument parsing, you should use <quote>\[</quote>. In other words:
		</para>

<para><programlisting>
[..[..\]..]    -->   ..[..]..
</programlisting></para>

		<para>
		Any line in one of the configuration files that is not formatted correctly will generally tend (erring on the
		side of caution) to make the authentication process fail. A corresponding error is written to the system log files
		with a call to syslog(3). 
		</para>
		</listitem>
	</varlistentry>
</variablelist>

</sect3>

</sect2>

<sect2>
<title>Example System Configurations</title>

<para>
The following is an example <filename>/etc/pam.d/login</filename> configuration file. 
This example had all options uncommented and is probably not usable 
because it stacks many conditions before allowing successful completion 
of the login process. Essentially all conditions can be disabled 
by commenting them out, except the calls to <filename>pam_pwdb.so</filename>.
</para>

<sect3>
<title>PAM: Original Login Config</title>

<para>
	<smbfile name="pam-login-default">
	<programlisting>
#%PAM-1.0
# The PAM configuration file for the <quote>login</quote> service
#
auth         required    pam_securetty.so
auth         required    pam_nologin.so
# auth       required    pam_dialup.so
# auth       optional    pam_mail.so
auth         required    pam_pwdb.so shadow md5
# account    requisite   pam_time.so
account      required    pam_pwdb.so
session      required    pam_pwdb.so
# session    optional    pam_lastlog.so
# password   required    pam_cracklib.so retry=3
password     required    pam_pwdb.so shadow md5
</programlisting>
</smbfile></para>

</sect3>

<sect3>
<title>PAM: Login Using <filename>pam_smbpass</filename></title>

<para>
PAM allows use of replaceable modules. Those available on a sample system include:
</para>

<para><prompt>$</prompt><userinput>/bin/ls /lib/security</userinput>
<programlisting>
pam_access.so    pam_ftp.so          pam_limits.so     
pam_ncp_auth.so  pam_rhosts_auth.so  pam_stress.so     
pam_cracklib.so  pam_group.so        pam_listfile.so   
pam_nologin.so   pam_rootok.so       pam_tally.so      
pam_deny.so      pam_issue.so        pam_mail.so       
pam_permit.so    pam_securetty.so    pam_time.so       
pam_dialup.so    pam_lastlog.so      pam_mkhomedir.so  
pam_pwdb.so      pam_shells.so       pam_unix.so       
pam_env.so       pam_ldap.so         pam_motd.so       
pam_radius.so    pam_smbpass.so      pam_unix_acct.so  
pam_wheel.so     pam_unix_auth.so    pam_unix_passwd.so
pam_userdb.so    pam_warn.so         pam_unix_session.so
</programlisting></para>

<para>
The following example for the login program replaces the use of 
the <filename>pam_pwdb.so</filename> module that uses the system 
password database (<filename>/etc/passwd</filename>,
<filename>/etc/shadow</filename>, <filename>/etc/group</filename>) with 
the module <filename>pam_smbpass.so</filename>, which uses the Samba 
database which contains the Microsoft MD4 encrypted password 
hashes. This database is stored in either 
<filename>/usr/local/samba/private/smbpasswd</filename>, 
<filename>/etc/samba/smbpasswd</filename>, or in 
<filename>/etc/samba.d/smbpasswd</filename>, depending on the 
Samba implementation for your UNIX/Linux system. The 
<filename>pam_smbpass.so</filename> module is provided by 
Samba version 2.2.1 or later. It can be compiled by specifying the 
<option>--with-pam_smbpass</option> options when running Samba's
<command>configure</command> script. For more information
on the <filename>pam_smbpass</filename> module, see the documentation
in the <filename>source/pam_smbpass</filename> directory of the Samba 
source distribution.
</para>

<para>
	<smbfile name="pam-login-smbpass">
	<programlisting>
#%PAM-1.0
# The PAM configuration file for the <quote>login</quote> service
#
auth        required    pam_smbpass.so nodelay
account     required    pam_smbpass.so nodelay
session     required    pam_smbpass.so nodelay
password    required    pam_smbpass.so nodelay
</programlisting></smbfile></para>

<para>
The following is the PAM configuration file for a particular 
Linux system. The default condition uses <filename>pam_pwdb.so</filename>.
</para>

<para>
	<smbfile name="pam-samba-default">
	<programlisting>
#%PAM-1.0
# The PAM configuration file for the <quote>samba</quote> service
#
auth       required     pam_pwdb.so nullok nodelay shadow audit
account    required     pam_pwdb.so audit nodelay
session    required     pam_pwdb.so nodelay
password   required     pam_pwdb.so shadow md5
</programlisting></smbfile></para>

<para>
In the following example, the decision has been made to use the 
<command>smbpasswd</command> database even for basic Samba authentication. Such a 
decision could also be made for the <command>passwd</command> program and would 
thus allow the <command>smbpasswd</command> passwords to be changed using the
<command>passwd</command> program:
</para>

<para><smbfile name="pam-samba-smbpass">
		<programlisting>
#%PAM-1.0
# The PAM configuration file for the <quote>samba</quote> service
#
auth       required     pam_smbpass.so nodelay
account    required     pam_pwdb.so audit nodelay
session    required     pam_pwdb.so nodelay
password   required     pam_smbpass.so nodelay smbconf=/etc/samba.d/smb.conf
</programlisting>
</smbfile></para>

<note><para>PAM allows stacking of authentication mechanisms. It is 
also possible to pass information obtained within one PAM module through 
to the next module in the PAM stack. Please refer to the documentation for 
your particular system implementation for details regarding the specific 
capabilities of PAM in this environment. Some Linux implementations also 
provide the <filename>pam_stack.so</filename> module that allows all 
authentication to be configured in a single central file. The 
<filename>pam_stack.so</filename> method has some devoted followers 
on the basis that it allows for easier administration. As with all issues in 
life though, every decision makes trade-offs, so you may want to examine the 
PAM documentation for further helpful information.
</para></note>

</sect3>

</sect2>

<sect2>
<title>&smb.conf; PAM Configuration</title>

<para>
	There is an option in &smb.conf; called <smbconfoption><name>obey pam restrictions</name></smbconfoption>.
The following is from the online help for this option in SWAT;
</para>

<para>
When Samba is configured to enable PAM support (i.e., <option>--with-pam</option>), this parameter will 
control whether or not Samba should obey PAM's account and session management directives. The default behavior 
is to use PAM for cleartext authentication only and to ignore any account or session management. Samba always 
ignores PAM for authentication in the case of <smbconfoption><name>encrypt passwords</name><value>yes</value></smbconfoption>. 
The reason is that PAM modules cannot support the challenge/response authentication mechanism needed in the presence of SMB 
password encryption. 
</para>

<para>Default: <smbconfoption><name>obey pam restrictions</name><value>no</value></smbconfoption></para>

</sect2>

<sect2>
<title>Remote CIFS Authentication Using <filename>winbindd.so</filename></title>

<para>
All operating systems depend on the provision of users credentials acceptable to the platform.
UNIX requires the provision of a user identifier (UID) as well as a group identifier (GID).
These are both simple integer type numbers that are obtained from a password backend such
as <filename>/etc/passwd</filename>.
</para>

<para>
Users and groups on a Windows NT server are assigned a relative ID (RID) which is unique for
the domain when the user or group is created. To convert the Windows NT user or group into
a  UNIX user or group, a mapping between RIDs and UNIX user and group IDs is required. This
is one of the jobs that winbind performs.
</para>

<para>
As Winbind users and groups are resolved from a server, user and group IDs are allocated
from a specified range. This is done on a first come, first served basis, although all
existing users and groups will be mapped as soon as a client performs a user or  group 
enumeration command. The allocated UNIX IDs are stored in a database file under the Samba
lock directory and will be remembered.
</para>

<para>
The astute administrator will realize from this that the combination of <filename>pam_smbpass.so</filename>, 
<command>winbindd</command> and a distributed <smbconfoption><name>passdb backend</name><value></value></smbconfoption>,
such as <parameter>ldap</parameter>, will allow the establishment of a centrally managed, distributed user/password
database that can also be used by all PAM-aware (e.g., Linux) programs and applications. This arrangement can have
particularly potent advantages compared with the use of Microsoft Active Directory Service (ADS) in so far as
the reduction of wide area network authentication traffic.
</para>

<warning><para>
The RID to UNIX ID database is the only location where the user and group  mappings are 
stored by <command>winbindd</command>. If this file is deleted or corrupted, there is no way for <command>winbindd</command>
to determine which user and group IDs correspond to Windows NT user and group RIDs.
</para></warning>

</sect2>

<sect2>
<title>Password Synchronization Using <filename>pam_smbpass.so</filename></title>

<para>
<filename>pam_smbpass</filename> is a PAM module that can be used on conforming systems to
keep the <filename>smbpasswd</filename> (Samba password) database in sync with the UNIX
password file. PAM (Pluggable Authentication Modules) is an API supported
under some UNIX operating systems, such as Solaris, HPUX and Linux, that provides a
generic interface to authentication mechanisms.
</para>

<para>
This module authenticates a local <filename>smbpasswd</filename> user database. If you require
support for authenticating against a remote SMB server, or if you are
concerned about the presence of SUID root binaries on your system, it is
recommended that you use <filename>pam_winbind</filename> instead.
</para>

<para>
Options recognized by this module are shown in <link linkend="smbpassoptions"/>.
<table frame="all" id="smbpassoptions">
	<title>Options recognized by <parameter>pam_smbpass</parameter></title>
	<tgroup cols="2" align="left">
		<colspec align="left"/>
		<colspec align="justify" colwidth="1*"/>
	<tbody>
		<row><entry>debug</entry><entry>log more debugging info.</entry></row>
		<row><entry>audit</entry><entry>like debug, but also logs unknown usernames.</entry></row>
		<row><entry>use_first_pass</entry><entry>do not prompt the user for passwords; take them from PAM_ items instead.</entry></row>
		<row><entry>try_first_pass</entry><entry>try to get the password from a previous PAM module fall back to prompting the user.</entry></row>
		<row><entry>use_authtok</entry>
			<entry>like try_first_pass, but *fail* if the new PAM_AUTHTOK has not been previously set (intended for stacking password modules only).</entry></row>
		<row><entry>not_set_pass</entry><entry>do not make passwords used by this module available to other modules.</entry></row>
		<row><entry>nodelay</entry><entry>do not insert ~1 second delays on authentication failure.</entry></row>
		<row><entry>nullok</entry><entry>null passwords are allowed.</entry></row>
		<row><entry>nonull</entry><entry>null passwords are not allowed. Used to override the Samba configuration.</entry></row>
		<row><entry>migrate</entry><entry>only meaningful in an <quote>auth</quote> context; used to update smbpasswd file with a password used for successful authentication.</entry></row>
		<row><entry>smbconf=<replaceable>file</replaceable></entry><entry>specify an alternate path to the &smb.conf; file.</entry></row>
	</tbody>
</tgroup>
</table>
</para>

<para>
The following are examples of the use of <filename>pam_smbpass.so</filename> in the format of Linux
<filename>/etc/pam.d/</filename> files structure. Those wishing to implement this
tool on other platforms will need to adapt this appropriately.
</para>

<sect3>
<title>Password Synchronization Configuration</title>

<para>
A sample PAM configuration that shows the use of pam_smbpass to make
sure <filename>private/smbpasswd</filename> is kept in sync when <filename>/etc/passwd (/etc/shadow)</filename>
is changed. Useful when an expired password might be changed by an
application (such as <command>ssh</command>).
</para>

<para>
	<smbfile name="pam-synchronised-password">
	<programlisting>
#%PAM-1.0
# password-sync
#
auth       requisite    pam_nologin.so
auth       required     pam_unix.so
account    required     pam_unix.so
password   requisite    pam_cracklib.so retry=3
password   requisite    pam_unix.so shadow md5 use_authtok try_first_pass
password   required     pam_smbpass.so nullok use_authtok try_first_pass
session    required     pam_unix.so
</programlisting></smbfile></para>
</sect3>

<sect3>
<title>Password Migration Configuration</title>

<para>
A sample PAM configuration that shows the use of <filename>pam_smbpass</filename> to migrate
from plaintext to encrypted passwords for Samba. Unlike other methods,
this can be used for users who have never connected to Samba shares:
password migration takes place when users <command>ftp</command> in, login using <command>ssh</command>, pop
their mail, and so on.
</para>

<para><smbfile name="pam-password-migration">
	<programlisting>
#%PAM-1.0
# password-migration
#
auth       requisite   pam_nologin.so
# pam_smbpass is called IF pam_unix succeeds.
auth       requisite   pam_unix.so
auth       optional    pam_smbpass.so migrate
account    required    pam_unix.so
password   requisite   pam_cracklib.so retry=3
password   requisite   pam_unix.so shadow md5 use_authtok try_first_pass
password   optional    pam_smbpass.so nullok use_authtok try_first_pass
session    required    pam_unix.so
</programlisting></smbfile></para>
</sect3>

<sect3>
<title>Mature Password Configuration</title>

<para>
A sample PAM configuration for a mature <filename>smbpasswd</filename> installation.
<filename>private/smbpasswd</filename> is fully populated, and we consider it an error if
the SMB password does not exist or does not match the UNIX password.
</para>

<para><smbfile name="pam-fallback">
<programlisting>
#%PAM-1.0
# password-mature
#
auth       requisite    pam_nologin.so
auth       required     pam_unix.so
account    required     pam_unix.so
password   requisite    pam_cracklib.so retry=3
password   requisite    pam_unix.so shadow md5 use_authtok try_first_pass
password   required     pam_smbpass.so use_authtok use_first_pass
session    required     pam_unix.so
</programlisting></smbfile></para>
</sect3>

<sect3>
<title>Kerberos Password Integration Configuration</title>

<para>
A sample PAM configuration that shows <parameter>pam_smbpass</parameter> used together with
<parameter>pam_krb5</parameter>. This could be useful on a Samba PDC that is also a member of
a Kerberos realm.
</para>

<para><smbfile name="pam-krb">
		<programlisting>
#%PAM-1.0
# kdc-pdc
#
auth       requisite   pam_nologin.so
auth       requisite   pam_krb5.so
auth       optional    pam_smbpass.so migrate
account    required    pam_krb5.so
password   requisite   pam_cracklib.so retry=3
password   optional    pam_smbpass.so nullok use_authtok try_first_pass
password   required    pam_krb5.so use_authtok try_first_pass
session    required    pam_krb5.so
</programlisting></smbfile></para>

</sect3>

</sect2>

</sect1>

<sect1>
<title>Common Errors</title>

<para>
PAM can be fickle and sensitive to configuration glitches. Here we look at a few cases from
the Samba mailing list.
</para>

<!-- shouldn't this be in the Winbind chapter - Jelmer -->
	<sect2>
	<title>pam_winbind Problem</title>

	<para>
	A user reported: I have the following PAM configuration:
	</para>

<para>
	<smbfile name="pam-winbind-erratic">
<programlisting>
auth required /lib/security/pam_securetty.so
auth sufficient /lib/security/pam_winbind.so
auth sufficient /lib/security/pam_unix.so use_first_pass nullok
auth required /lib/security/pam_stack.so service=system-auth
auth required /lib/security/pam_nologin.so
account required /lib/security/pam_stack.so service=system-auth
account required /lib/security/pam_winbind.so
password required /lib/security/pam_stack.so service=system-auth
</programlisting></smbfile>
</para>

	<para>
	When I open a new console with [ctrl][alt][F1], I can't log in with my user <quote>pitie</quote>.
	I have tried with user <quote>scienceu+pitie</quote> also.
	</para>

	<para>
	<emphasis>Answer:</emphasis> The problem may lie with your inclusion of <parameter>pam_stack.so
	service=system-auth</parameter>. That file often contains a lot of stuff that may
	duplicate what you are already doing. Try commenting out the <parameter>pam_stack</parameter> lines
	for <parameter>auth</parameter> and <parameter>account</parameter> and see if things work. If they do, look at
	<filename>/etc/pam.d/system-auth</filename> and copy only what you need from it into your
	<filename>/etc/pam.d/login</filename> file. Alternately, if you want all services to use
	Winbind, you can put the Winbind-specific stuff in <filename>/etc/pam.d/system-auth</filename>.
	</para>

	</sect2>

	<sect2>
	<title>Winbind Is Not Resolving Users and Groups</title>

	<para>
	<quote>
	My &smb.conf; file is correctly configured. I have specified 
	<smbconfoption><name>idmap uid</name><value>12000</value></smbconfoption>, 
	and <smbconfoption><name>idmap gid</name><value>3000-3500</value></smbconfoption>
	and <command>winbind</command> is running. When I do the following it all works fine.
	</quote>
	</para>

<para><screen>
&rootprompt;<userinput>wbinfo -u</userinput>
MIDEARTH+maryo
MIDEARTH+jackb
MIDEARTH+ameds
...
MIDEARTH+root

&rootprompt;<userinput>wbinfo -g</userinput>
MIDEARTH+Domain Users
MIDEARTH+Domain Admins
MIDEARTH+Domain Guests
...
MIDEARTH+Accounts

&rootprompt;<userinput>getent passwd</userinput>
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/bin/bash
...
maryo:x:15000:15003:Mary Orville:/home/MIDEARTH/maryo:/bin/false
</screen></para>

	<para>
	<quote>
	But this command fails:
	</quote>
<screen>
&rootprompt;<userinput>chown maryo a_file</userinput>
chown: 'maryo': invalid user
</screen>
	<quote>This is driving me nuts! What can be wrong?</quote>
	</para>

	<para>
	<emphasis>Answer:</emphasis> Your system is likely running <command>nscd</command>, the name service
	caching daemon. Shut it down, do not restart it! You will find your problem resolved.
	</para>

	</sect2>
</sect1>

</chapter>
